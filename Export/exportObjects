#!/usr/bin/perl -w
#
# Copyright (C) 2004 - 2014  Jon Stockill, Martin Spott
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use Cwd;
use DBI;
use File::Path;
use MIME::Base64;
use strict;

my $basedir = getcwd;
my $Count = 0;
#my $DEBUG = 0;
my ($SQLObjectPath, $SQLPosition, $SQLMeta, $SQLWhere, $SQLOrder);
my ($Lasttile, $dbh, $sth, %row);
my ($obtype, $ObjectPath);

my $pghost = $ENV{"PGHOST"};
my $pgdatabase = $ENV{"PGDATABASE"};

# Make STDOUT "hot"
select((select(STDOUT), $|=1)[0]);

$dbh = (DBI->connect("DBI:Pg:host=$pghost;dbname=$pgdatabase", "webuser", ""));

$Lasttile = -1;

$SQLPosition = "concat('/Objects/', fn_SceneDir(wkb_geometry), '/', fn_SceneSubDir(wkb_geometry), '/') AS path, ST_Y(wkb_geometry) AS lat, ST_X(wkb_geometry) AS lon";
$SQLMeta = "ob_tile AS tile, fn_StgElevation(ob_gndelev, ob_elevoffset)::float AS stgelev, fn_StgHeading(ob_heading)::float AS stgheading, mo_id, mo_path";
$SQLWhere = "WHERE ob_valid IS TRUE AND ob_tile IS NOT NULL AND ob_model = mo_id AND ob_gndelev > -9999 AND mo_shared";
$SQLOrder = "ORDER BY tile, mo_id, lon, lat, stgelev, stgheading";

#print STDOUT "Executing query to export shared objects...\n" if $DEBUG == 1;
$dbh = get_dbh() unless $dbh;
$sth = $dbh->prepare("SELECT $SQLPosition, $SQLMeta, mg_path FROM fgs_objects, fgs_models, fgs_modelgroups $SQLWhere > 0 AND mo_shared = mg_id $SQLOrder;");
$sth->execute() or die $dbh->errstr;

#print STDOUT "done\n" if $DEBUG == 1;
$sth->bind_columns( \( @row{ @{$sth->{NAME_lc} } } ));

while ($sth->fetchrow_arrayref) {
#    print STDOUT "Exported " . $Count++ . " objects\r" if $DEBUG == 1;

    if ($row{tile} != $Lasttile)
    {
#        print STDOUT "\nOpening new file $row{tile}.stg\n" if $DEBUG == 1;
        close OUTFILE;
        $ObjectPath = $basedir . $row{path};
        open OUTFILE, ">>" . $ObjectPath . "/" . $row{tile} . ".stg";
        $Lasttile = $row{tile};
    };
    $obtype = "SHARED Models/" . $row{mg_path} . $row{mo_path};
    print OUTFILE "OBJECT_" . $obtype . " " . $row{lon} . " " . $row{lat} . " " . $row{stgelev} . " " . $row{stgheading} . "\n";
};
print STDOUT "Shared Objects done\n";

$Lasttile = -1;

#print STDOUT "Executing query to export static objects...\n" if $DEBUG == 1;
$dbh = get_dbh() unless $dbh;
$sth = $dbh->prepare("SELECT $SQLPosition, $SQLMeta, LENGTH(mo_modelfile) AS mo_size, mo_modelfile FROM fgs_objects, fgs_models $SQLWhere = 0 $SQLOrder;");
$sth->execute() or die $dbh->errstr;

#print STDOUT "done\n" if $DEBUG == 1;
$sth->bind_columns( \( @row{ @{$sth->{NAME_lc} } } ));

while ($sth->fetchrow_arrayref) {
#    print STDOUT "Exported " . $Count++ . " objects\r" if $DEBUG == 1;

    $ObjectPath = $basedir . $row{path};

    if ($row{tile} != $Lasttile)
    {
#        print STDOUT "\nOpening new file $row{tile}.stg\n" if $DEBUG == 1;
        close OUTFILE;
        open OUTFILE, ">>" . $ObjectPath . "/" . $row{tile} . ".stg";
        $Lasttile = $row{tile};
    };
    $obtype = "STATIC " . $row{mo_path};
    print OUTFILE "OBJECT_" . $obtype . " " . $row{lon} . " " . $row{lat} . " " . $row{stgelev} . " " . $row{stgheading} . "\n";

    if ($row{mo_size} > 15)
    {	
        my $modeldata = decode_base64($row{mo_modelfile});
#        print STDOUT $row{mo_id} . " " . $row{mo_path} . "\n" if $DEBUG == 1;
        chdir $ObjectPath;
        open(BUFF, "| tar xfz -");
        print BUFF $modeldata;
    }
    else
    {
        print STDOUT "WARNING: " . $row{mo_path} . " is not in the database\n";
    };
};
print STDOUT "Static Objects done\n";

$Lasttile = -1;

$SQLMeta = "si_tile AS tile, si_gndelev::float AS stgelev, fn_StgHeading(si_heading)::float AS stgheading";
$SQLWhere = "WHERE si_valid IS TRUE";
$SQLOrder = "ORDER BY tile, lon, lat, stgelev, stgheading";

#print STDOUT "Executing query to export taxiway signs...\n" if $DEBUG == 1;
$dbh = get_dbh() unless $dbh;
$sth = $dbh->prepare("SELECT $SQLPosition, $SQLMeta, si_definition FROM fgs_signs $SQLWhere $SQLOrder;");
$sth->execute() or die $dbh->errstr;

#print STDOUT "done\n" if $DEBUG == 1;
$sth->bind_columns( \( @row{ @{$sth->{NAME_lc} } } ));

while ($sth->fetchrow_arrayref) {
#    print STDOUT "Exported " . $Count++ . " signs\r" if $DEBUG == 1;

    if ($row{tile} != $Lasttile)
    {
#        print STDOUT "\nOpening new file $row{tile}.stg\n" if $DEBUG == 1;
        close OUTFILE;
        $ObjectPath = $basedir . $row{path};
        open OUTFILE, ">>" . $ObjectPath . "/" . $row{tile} . ".stg";
        $Lasttile = $row{tile};
    };
    $obtype = "SIGN " . $row{si_definition};
    print OUTFILE "OBJECT_" . $obtype . " " . $row{lon} . " " . $row{lat} . " " . $row{stgelev} . " " . $row{stgheading} . "\n";
};
print STDOUT "Signs done\n";

exit(0);

# EOF

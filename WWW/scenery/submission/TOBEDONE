Shared Positions
================
Mandatory
---------
(Optional for now, ideas for a bright future!)
----------------------------------------------
- Reviews the PREGs and pg escape scheme.
- Enable the user to submit its email to get informed of the process. Enable maintainer to drop a comment.
- Strip tags for comments and delete defaut value.
- Add a true heading/STG heading radio button.
- Make sure Javascript is turned on?
- Shows the object picture when selected (Ajax when adding).
- Shows the object position when selected (map when adding...).
- Automate the altitude calculation (is there a FG server giving this online f(lat, long) ?)
- Regionalise the maintainers : if lat/lon between x and y, send the validation mail to Jon, Martin or... else
- When there is an error with the captcha, an error page is being presented, containing a "Go back ..."
  link - but when clicked - all values have to be re-entered from scratch. Preserving the entered values so
  submitters just have to re-enter a captcha phrase would be highly beneficial.
- Add a tcp/or so socket link between FG core and this script to import data directly into the DB!
- Take object "SIGN" into account.
- Add \n to make scripts readable.
- Check the isset everywhere.
- In delete, update script put the captcha & comment at the final form, not the first one ?
- Add ob_text, ob_country, ob_author add/update possibilities.
- Check for every form & page the referring page & the value of the form submitting.
- Be more precise in errors (check static).
- Detect if submitting an already existing object.
- Use Jquery lib for form checking & asynchronous queries.
- Check the coherence of strlen everywhere.
- ob_name workaround for mass import.
- Be careful : when updating/deleting, have to be precise on the fact that the heading taken from DB is the TRUE heading. (ot make another conversion, ...)
- Adding a script so send monthly a summary of FG pending requests in DB. (have to see with Martin for croning).

Static objects
==============
Process...
==========

1.) Submitter uploads model.

 - numerical ID of the 3D model (mo_id, this procedure asks for a proper fix

 => Keep the capability of submitting shared 3D models.
today I recieved a submission for airport models at MSLP.  I didn't
have a look at the models themselves, but noticed, that the guy is
using really obscure texture file names. "R.png", "techo.png",
"anexo.png" and the like.
I think we need some tool to provide feedback to people when they're
submitting via a form.  The first ide which comes into my mind would be
a mandatory field for entering an EMail address so the reviewer can cet
in contact with the submitter ....  and maybe have a predefined
feedback button for the reviewer which just responds "please use
descriptive texture file names"  :-)
Note, the two-letter country code starts with "ob_", this goes into our
objects table (fgs_objects), containing the position whereas the bare
model, no matter if it's shared or static, goes into the models table
(fgs_objects).

2.) Submission system complains about missing texture files (just an
example), submission gets discarded entirely.

=> There are not always textures (AC3D file with simple colors) and there can be multiple textures.

First I'm running every file in question through 'dos2unix'  ;-)

Then I'm checking if the model path is an XML of an AC3D file by
running the Unix "file" command.  It's worth noting that "file" only
recognizes XML properly if they have a proper XML header in the first
line, at least one like:

<?xml version="1.0"?>

Some committers don't supply an XML header with their models because
things also appear to work in FlightGear without this header, but if
it's missing, I _always_ add one for the sake of consistency ....  who
knows which XML reader we'll have to satisfy in the future.

If the file is an XML and available, I'm searching for the first
occurrence of a "<path>[...]</path>" clause in order to determine which
AC3D model belongs into this model.  Now that I know the AC3D pathname,
I'm checking if the file is available, then I start searching the AC3D
file for reasonable "texture" clauses - usually starts a line with
""texture" and later on contains something like .rgb, .png, .jpg or
.jpeg

Now that I know the names of all texture files - or I realize that
there's no texture assigned, I'm checking if the texture files are
available.  I also _should_ check the file type (PNG, JPEG, ...) of the
textures (via Unix "file") but currently I don't do that.

Well, now I'm parsing a small snippet of an .stg file which contains
the corresponding model entry and I' retrieving lon, lat, elevation and
heading from this entry.
Note, as you know, obviously, .stg-files are oriented by having '0
degrees' in the south, counting counter-clockwise. We don't do this in
our DB, instead we're calculating the "right" orientation of the model
which is what we're putting into the DB. You'll notice when looking at
this entry:

  http://scenemodels.flightgear.org/objectedit.php?id=3287737

We're translating real headings into .stg-format upon export, thus
leaving the correct headings in the DB intact.

When I'm having all information in place, then I'm creating two 'items'
of which the first one is a BASE64-encoded, GNU-zipped tar file which
contains everything which belongs to the model: The XML file (if
present), the AC3D model and _every_ texture file.  We don't add a
single model even if just one texture is missing, even if another model
in the same tile is already having the same texture.  Instead, every of
our models is completely self-contained.  The other item is the
BASE64-encoded, 320x240 JPEG thumbnail.
I've added two attachments to this EMail, the first one (a.sql)
contains the complete SQL file for the most recent addition, the second
(b.sql) is almost the same, just with the large BASE64-encoded content
stripped down for easier readability.

The SQL is a bit clumsy, but it has proven to be really 'robust' !  ;-)
The "SELECT setval('fgs_models_mo_id_seq[...]" is just an ugly hack
around ....  read here:

I mentioned that the model-ID is asking for a proper fix. The point is:
I'm issuing two (or three) SQL statements when importing a model.
INSERT INTO fgs_models ....  to insert the bare model.  The
"fgs_models" table has a sequence assigned on the "mo_id" column which
automatically increments the number on each insert.
Today I'm manually looking for the next free model-ID and I'm setting
"mo_id" upon insert.  BUT the proper way would be _not_ to set "mo_id"
but to just drop the model into the table and let the DB assign the ID.
There's just one problem: We need to know the model-ID when inserting
the positional data into the "fgs_objects" table because the latter
contains a reference to the numeric ID of the model.

Thus, it would be better to insert the model into "fgs_models",
retrieve the ID it has been assigned by the DB and to re-use this ID
for inserting into "fgs_objects".  I think this is possible with
PostgreSQL, I just never did it.

Here's the structure of "fgs_models":

 mo_id        | integer                     | not null Vorgabewert nextval('fgs_models_mo_id_seq'::regclass)
 mo_path      | character varying(100)      | not null
 mo_modified  | timestamp without time zone |
 mo_author    | integer                     |
 mo_name      | character varying(100)      |
 mo_notes     | character varying           |
 mo_thumbfile | character varying           |
 mo_modelfile | character varying           | not null
 mo_shared    | integer

3.) Submitter uploads model in a sane state, EMail ist being set to a
group of maintainers: "Hey, there's a new model and it passed all
checks. The submission was assigned ID 12345, get it from the following
URL: ....".

4.) Maintainer opens URL, looks at the list of files and the file sizes
as included in the submission, maintainer downloads model for viewing
in 'osgviewer' - at least that's what I am doing nowadays as a visual
check.

5.) Model looks fine but we don't want to have textures named
"roof.png".  Maintainer refuses to commit model, submission gets
discarded.

6.) Submitter gets notified (EMail !?) about the reason and submits
again, now with more reasonable texture names.

7.) ....  EMail to the group of maintainers.

8.) Maintainer feels happy and commits the model to the Scenemodels
repository - either by checking with a certain URL, typing a command on
'sphere' or whatever may sound reasonable.  I'm open to suggestions.

_Many_ submissions will just require 1.), 3.), 4.) and 8.), but quite a
few really require the "extended" procedure.
 
Mandatory
---------
3D Models consistency script termination
Heading trick
Captcha
pg_escape_string
Offset ?
Logging/emailing ?
Fake-db testing
Live db testing

Optional
--------
Make sure Javascript is on?
Make a nice resume of everything submitted (picture, map...)
PHP functions use, to enhance the code and reuse the functions whenever needed.
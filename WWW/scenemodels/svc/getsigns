#!/usr/bin/python
#getobjects: webservice to get scene models within a bounding box
#
#Written by Torsten Dreyer, started January 2016
#Copyright 2016 Torsten Dreyer
#
#Thanks to Martin Spott for preparing the ground of Scenemodels
#Without him, all this would not be possible.
#
#This file is part of FlightGear.
#
#FlightGear is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 2 of the License, or
#(at your option) any later version.
#
#FlightGear is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with FlightGear.  If not, see <http://www.gnu.org/licenses/>.

import cgi, sys
import psycopg2, psycopg2.extras
import json

#import cgitb
#cgitb.enable()

pghost = "localhost"
pgport = 5432
pgdatabase = "scenemodels"
pguser = "webuser"
db_params = {"host":pghost, "port":pgport, "database":pgdatabase, "user":pguser}
db_conn = psycopg2.connect(**db_params)
db_cursor = db_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

print "Content-Type: application/json"
print

#         concat('Objects/', fn_SceneDir(wkb_geometry), '/', fn_SceneSubDir(wkb_geometry), '/') AS sipath \

sql = "SELECT si_id, ST_Y(wkb_geometry) AS ob_lat, ST_X(wkb_geometry) AS ob_lon, \
         si_heading, si_gndelev, si_definition \
         FROM fgs_signs \
         WHERE ST_Within(wkb_geometry, ST_GeomFromText('POLYGON((%s %s,%s %s,%s %s,%s %s,%s %s))',4326)) \
         LIMIT 400"

#print "{}\n";
arguments = cgi.FieldStorage()
if 'e' not in arguments or 'w' not in arguments or 'n' not in arguments or 's' not in arguments:
    print( '{}' )
    sys.exit()

east = float(arguments['e'].value)
west = float(arguments['w'].value)
north = float(arguments['n'].value)
south = float(arguments['s'].value)
db_cursor.execute( sql % (west,south,west,north,east,north,east,south,west,south) )

reply = { 'type': 'FeatureCollection', 'features': [] }

db_result = db_cursor.fetchall()
for row in db_result:
    siid = row['si_id']
    
    feature = { 'type': 'Feature', 
                'id': siid,
                'geometry':{
                    'type': 'Point','coordinates': [row['ob_lon'], row['ob_lat']]
                },
                'properties': {
                    'id': siid,
                    'heading': str(row['si_heading']),
                    'definition': row['si_definition'],
                    'gndelev': str(row['si_gndelev']),
                    #'stg': str(row['sipath']) + str(row['ob_tile']) + '.stg',
                }
              }
    reply['features'].append(feature)

print json.dumps(reply, separators=(',',':'))


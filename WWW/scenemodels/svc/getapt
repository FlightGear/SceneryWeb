#!/usr/bin/python
#getobjects: webservice to get scene models within a bounding box
#
#Written by Torsten Dreyer, started January 2016
#Copyright 2016 Torsten Dreyer
#
#Thanks to Martin Spott for preparing the ground of Scenemodels
#Without him, all this would not be possible.
#
#This file is part of FlightGear.
#
#FlightGear is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 2 of the License, or
#(at your option) any later version.
#
#FlightGear is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with FlightGear.  If not, see <http://www.gnu.org/licenses/>.

import cgi, sys
import psycopg2, psycopg2.extras
import re, json, os

#import cgitb
#cgitb.enable()

pghost = "localhost"
pgport = 5432
pgdatabase = "scenemodels"
pguser = "webuser"
db_params = {"host":pghost, "port":pgport, "database":pgdatabase, "user":pguser}
db_conn = psycopg2.connect(**db_params)
db_cursor = db_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

################ Handle GET Request ##############################
def handleGet():

  arguments = cgi.FieldStorage()
  if 'icao' not in arguments:
      return ''

  icao = arguments['icao'].value
  if not re.match("^[A-Za-z0-9]*$", icao ):
      return ''

  sql = "select ST_AsGeoJSON(wkb_geometry) as rwy from apt_runway where icao=UPPER(%s);"
  db_cursor.execute( sql, (icao,) )

  runwaysGeometry = { 'type': 'GeometryCollection', 'geometries': [] }
  reply = { 'runwaysGeometry': runwaysGeometry, 'procedures': [] }

  db_result = db_cursor.fetchall()
  for row in db_result:
      runwaysGeometry['geometries'].append(json.loads(str(row['rwy'])));

  sql = "SELECT pr_id, pr_runways, pr_name, pr_type \
           FROM fgs_procedures \
           WHERE pr_airport = UPPER(%s);"

  db_cursor.execute( sql, (icao,) )

  db_result = db_cursor.fetchall()
  for row in db_result:
      procedure  = {
                    'id': row['pr_id'],
                    'runways': row['pr_runways'],
                    'name': row['pr_name'],
                    'type': row['pr_type'],
                   }
      reply['procedures'].append(procedure)

  return json.dumps(reply, separators=(',',':'))


################ Insert new procedure ##############################
def newProcedure( props ):
  sql = "INSERT INTO fgs_procedures (pr_id,pr_airport,pr_name,pr_type,pr_runways) \
           VALUES (DEFAULT,UPPER(%s),%s,%s,%s);"
  data = (
   props['icao'],
   props['name'],
   props['type'],
   props['runways'],)

  db_cursor.execute( sql, data )
  db_conn.commit()

################ Handle POST Request ##############################
def handlePost():
  request = json.load(sys.stdin);
  if request['command'] == 'newProcedure':
    newProcedure( request );

  return json.dumps({ 'status': 'ok' })

print "Content-Type: application/json"
# disable CORS for now
#print "Access-Control-Allow-Origin: *"
#print "Access-Control-Allow-Methods: OPTIONS, GET, POST"
#print "Access-Control-Allow-Headers: Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token"

print

if os.environ['REQUEST_METHOD'] == 'GET':
  print handleGet()

elif os.environ['REQUEST_METHOD'] == 'POST':
  print handlePost()

elif os.environ['REQUEST_METHOD'] == 'OPTIONS':
  pass

# silently ignore other methods
else:
  pass

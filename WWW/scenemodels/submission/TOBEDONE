Shared objects
==============
- Reviews the PREGs and pg escape scheme.
- Enable the user to submit its email to get informed of the process. Enable maintainer to drop a comment.
- Strip tags for comments and delete defaut value.
- Add a true heading/STG heading radio button.
- Make sure Javascript is turned on?
- Shows the object picture when selected (Ajax when adding).
- Shows the object position when selected (map when adding...).
- Automate the altitude calculation (is there a FG server giving this online f(lat, long) ?)
- Regionalise the maintainers : if lat/lon between x and y, send the validation mail to Jon, Martin or... else
- When there is an error with the captcha, an error page is being presented, containing a "Go back ..."
  link - but when clicked - all values have to be re-entered from scratch. Preserving the entered values so
  submitters just have to re-enter a captcha phrase would be highly beneficial.
- Add a tcp/or so socket link between FG core and this script to import data directly into the DB!
- Take object "SIGN" into account.
- Add \n to make scripts readable.
- Check the isset everywhere.
- In delete, update script put the captcha & comment at the final form, not the first one ?
- Add ob_text, ob_country, ob_author add/update possibilities.
- Check for every form & page the referring page & the value of the form submitting.
- Detect if submitting an already existing object.
- Use Jquery lib for form checking & asynchronous queries.
- Check the coherence of strlen everywhere.
- ob_name workaround for mass import.
- Be careful : when updating/deleting, have to be precise on the fact that the heading taken from DB is the TRUE heading. (ot make another conversion, ...)
- Take comments into account to merge them into the generated STG file (but how will you remove them ;-)

Static objects
==============
- numerical ID of the 3D model (mo_id, this procedure asks for a proper fix
- keep the capability of submitting shared 3D models.
- format the texture file names so nobody can send obscure texture file names. "R.png", "techo.png",
  "anexo.png" and the like.
- provide feedback to people when they're submitting via a form (mandatory field for entering an EMail address
  so the reviewer can get in contact with the submitter and have a predefined feedback button for the reviewer
  which just responds "please use descriptive texture file names"
- Note, the two-letter country code starts with "ob_", this goes into our objects table (fgs_objects), containing the position whereas   the bare model, no matter if it's shared or static, goes into the models table (fgs_objects).
- There are not always textures (AC3D file with simple colors) and there can be multiple textures.
- concurrent file uploads.
- 'dos2unix' on every file before submission
- some committers don't supply an XML header with their models because
  things also appear to work in FlightGear without this header, but if
  it's missing, I _always_ add one for the sake of consistency ....  who
  knows which XML reader we'll have to satisfy in the future.
- If the file is an XML and available, I'm searching for the first
  occurrence of a "<path>[...]</path>" clause in order to determine which
  AC3D model belongs into this model.  Now that I know the AC3D pathname,
  I'm checking if the file is available, then I start searching the AC3D
  file for reasonable "texture" clauses - usually starts a line with
  "texture" and later on contains something like .rgb, .png, .jpg or
  .jpeg
- the model-ID is asking for a proper fix. The point is:
  I'm issuing two (or three) SQL statements when importing a model.
  INSERT INTO fgs_models ....  to insert the bare model.  The
  "fgs_models" table has a sequence assigned on the "mo_id" column which
  automatically increments the number on each insert.
  Today I'm manually looking for the next free model-ID and I'm setting
  "mo_id" upon insert.  BUT the proper way would be _not_ to set "mo_id"
  but to just drop the model into the table and let the DB assign the ID.
  There's just one problem: We need to know the model-ID when inserting
  the positional data into the "fgs_objects" table because the latter
  contains a reference to the numeric ID of the model.
  Thus, it would be better to insert the model into "fgs_models",
  retrieve the ID it has been assigned by the DB and to re-use this ID
  for inserting into "fgs_objects".  I think this is possible with
  PostgreSQL, I just never did it.
- Submitter uploads model in a sane state, EMail ist being set to a
  group of maintainers: "Hey, there's a new model and it passed all
  checks. The submission was assigned ID 12345, get it from the following
  URL: ....".
- Maintainer opens URL, looks at the list of files and the file sizes
  as included in the submission, maintainer downloads model for viewing
  in 'osgviewer' - at least that's what I am doing nowadays as a visual
  check.
- Captcha
- pg_escape_string
- Logging options
- Fake-db testing
- Live db testing
- Make sure Javascript is on?
- Make a nice resume of everything submitted (picture, map...)

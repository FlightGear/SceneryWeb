<%
#
# called by 'shpdl.psp'
# calls 'dlaction.sh'
#
# Verify input from the web form and store the necessary details in the
# 'download' database table. Fire 'dlaction.sh' with a reference to the UUID
# of the respective database entry.
#
import pgdb
from pgdb import escape_string
import uuid
import time
import os

# Define DB connection for verification of layers to download
#
ldbconnect = pgdb.connect(host='geoscope.optiputer.net',
                          database='landcover',
                          user='webuser')

cursor = ldbconnect.cursor()

myvars = {}
myvars['mylayer'] = ("%(layer)s" % form)

# Check if the defined layer to download is a valid one
#
testlayercmd = ( "SELECT COUNT(*) from conf_layer \
  WHERE maplayer = '%(mylayer)s' \
  OR (pgislayer = '%(mylayer)s' AND maplayer IS NULL);" % myvars )

cursor.execute ( testlayercmd )
layervalid = cursor.fetchone()

# Layer not present in 'conf_layer' table
#
if layervalid[0] != 1:
  print "Please select a valid layer!"
  exit(1)

xmin = float("%(xmin)s" % form)
xmax = float("%(xmax)s" % form)
ymin = float("%(ymin)s" % form)
ymax = float("%(ymax)s" % form)
dlarea = ((xmax - xmin) * (ymax - ymin))

# West/East swapped
#
if xmin > xmax:
  print "Please use reasonable coordinates!"
  exit(1)

# Nort/South swapped
#
if ymin > ymax:
  print "Please use reasonable coordinates!"
  exit(1)

# Area too large
#
if dlarea > 144:
  print "Please don't exceed maximum area!"
  exit(1)

# Now, everything is ok
#
myvars['myuuid'] = uuid.uuid4()
myvars['ll_geometry'] = ("%(xmin)s %(ymin)s" % form)
myvars['ur_geometry'] = ("%(xmax)s %(ymax)s" % form)
myvars['mydate'] = time.strftime("%Y-%m-%d %H:%M")

# After everything's verified, store an entry in the 'download' table for
# retrieval and execution via the 'dlaction.sh' script.
#
sqlStatements = ("INSERT INTO download (uuid, ll_geometry, " + \
                 "ur_geometry, pgislayer, requestdate) VALUES \
  ('%(myuuid)s', \
  ST_GeomFromEWKT('SRID=4326;POINT(%(ll_geometry)s)'), \
  ST_GeomFromEWKT('SRID=4326;POINT(%(ur_geometry)s)'), \
  '%(mylayer)s', \
  '%(mydate)s' \
);" % myvars)

try:
    cursor.execute(sqlStatements)
except pgdb.DatabaseError, errText:
    raise pgdb.DatabaseError, errText

# Cleanup
#
cursor.close()
ldbconnect.commit()
ldbconnect.close()

# Finally call 'dlaction.sh' with the given UUID identifier as stored in the
# 'download' table and redirect to the downloadable file.
#
dumpcmd = ("/home/fgscenery/GIT/WWW/mapserver/dlaction.sh %(myuuid)s > /tmp/dlaction.log 2>&1" % myvars )
os.system( dumpcmd )
psp.redirect( "/download/%(mylayer)s-%(myuuid)s.zip" % myvars )
%>
